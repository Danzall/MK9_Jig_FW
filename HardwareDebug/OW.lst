   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.comm	_OWtimer,2,2
  35                             		.comm	_errorTimer,2,2
  36                             		.comm	_count,20,1
  37                             		.global	_usDelay
  39                             	_usDelay:
  40                             	.LFB0:
  41                             		.file 1 "../src/OW.c"
   1:../src/OW.c   **** /*
   2:../src/OW.c   ****  * OW.c
   3:../src/OW.c   ****  *
   4:../src/OW.c   ****  *  Created on: Jun 22, 2018
   5:../src/OW.c   ****  *      Author: Jeefo
   6:../src/OW.c   ****  */
   7:../src/OW.c   **** /**************************************************************************************************
   8:../src/OW.c   **** Includes
   9:../src/OW.c   **** ***************************************************************************************************
  10:../src/OW.c   **** #include "r_cg_macrodriver.h"
  11:../src/OW.c   **** #include "r_cg_cgc.h"
  12:../src/OW.c   **** #include "r_cg_port.h"
  13:../src/OW.c   **** #include "r_cg_serial.h"
  14:../src/OW.c   **** #include "r_cg_timer.h"
  15:../src/OW.c   **** /* Start user code for include. Do not edit comment generated here */
  16:../src/OW.c   **** #include "stdio.h"
  17:../src/OW.c   **** #include "board.h"
  18:../src/OW.c   **** #include <string.h>
  19:../src/OW.c   **** #include "OW.h"
  20:../src/OW.c   **** /* End user code. Do not edit comment generated here */
  21:../src/OW.c   **** #include "r_cg_userdefine.h"
  22:../src/OW.c   **** 
  23:../src/OW.c   **** int OWtimer;
  24:../src/OW.c   **** int errorTimer;
  25:../src/OW.c   **** char count[20];
  26:../src/OW.c   **** 
  27:../src/OW.c   **** void usDelay(int time){
  42                             		.loc 1 27 0
  28:../src/OW.c   **** 	OWtimer = 0;
  43                             		.loc 1 28 0
  44 0000 F6                      		clrw	ax
  45 0001 BF 00 00                		movw	!_OWtimer, ax
  29:../src/OW.c   **** 	while (OWtimer < time);
  46                             		.loc 1 29 0
  47 0004 00                      		nop
  48                             	.L2:
  49                             		.loc 1 29 0 is_stmt 0 discriminator 1
  50 0005 AF 00 00                		movw	ax, !_OWtimer
  51 0008 BD F2                   		movw	r10, ax
  52 000a A8 04                   		movw	ax, [sp+4]
  53 000c BD F0                   		movw	r8, ax
  54 000e AD F2                   		movw	ax, r10
  55 0010 46 F0                   		cmpw	ax, r8
  56 0012 71 FF                   		 xor1	CY, a.7
  57 0014 71 77 F1                		 xor1	CY, r9.7
  58 0017 61 D8                   		 sknc
  59 0019 EC 05 00 00             		 br	!!.L2
  30:../src/OW.c   **** }
  60                             		.loc 1 30 0 is_stmt 1
  61 001d D7                      		ret
  62                             	.LFE0:
  64                             		.section	.rodata
  65                             	.LC0:
  66 0000 4F 57 74 69 6D 65 72 2D 		.string	"OWtimer-%d\r\n"
  66      25 64 0D 0A 00 
  67                             	.text
  68                             		.global	_ResetWait
  70                             	_ResetWait:
  71                             	.LFB1:
  31:../src/OW.c   **** 
  32:../src/OW.c   **** void ResetWait(){
  72                             		.loc 1 32 0
  73                             		; start of function
  74                             		; locals: 2 bytes
  75                             		; outgoing: 6 bytes
  76 001e 20 08                   		subw	sp, #8
  77                             	.LCFI0:
  33:../src/OW.c   **** 	int time;
  34:../src/OW.c   **** 
  35:../src/OW.c   **** 	TAGI = 0;
  78                             		.loc 1 35 0
  79 0020 C9 F0 05 FF             		movw	r8, #-251
  80 0024 AD F0                   		movw	ax, r8
  81 0026 BD F2                   		movw	r10, ax
  82 0028 FA F2                   		movw	hl, r10
  83 002a 71 93                   		clr1	[hl].1 ;insvmisalignqi [hl],#1,#1,#0 {0}
  36:../src/OW.c   **** 	while (TAGO == 1);
  84                             		.loc 1 36 0
  85 002c 00                      		nop
  86                             	.L4:
  87                             		.loc 1 36 0 is_stmt 0 discriminator 1
  88 002d C9 F0 03 FF             		movw	r8, #-253
  89 0031 AD F0                   		movw	ax, r8
  90 0033 BD F2                   		movw	r10, ax
  91 0035 FA F2                   		movw	hl, r10
  92 0037 8B                      		mov	a, [hl]
  93 0038 31 69                   		shl	a, 6
  94 003a 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
  95 003c 9D F0                   		mov	r8, a
  96 003e 4A F0 01                		cmp	r8, #1
  97 0041 61 F8                   		 sknz
  98 0043 EC 2D 00 00             		 br	!!.L4
  37:../src/OW.c   **** 	OWtimer = 0;
  99                             		.loc 1 37 0 is_stmt 1
 100 0047 F6                      		clrw	ax
 101 0048 BF 00 00                		movw	!_OWtimer, ax
  38:../src/OW.c   **** 	while (TAGO == 0);
 102                             		.loc 1 38 0
 103 004b 00                      		nop
 104                             	.L5:
 105                             		.loc 1 38 0 is_stmt 0 discriminator 1
 106 004c C9 F0 03 FF             		movw	r8, #-253
 107 0050 AD F0                   		movw	ax, r8
 108 0052 BD F2                   		movw	r10, ax
 109 0054 FA F2                   		movw	hl, r10
 110 0056 8B                      		mov	a, [hl]
 111 0057 31 69                   		shl	a, 6
 112 0059 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 113 005b 9D F0                   		mov	r8, a
 114 005d D4 F0                   		cmp0	r8
 115 005f 61 F8                   		 sknz
 116 0061 EC 4C 00 00             		 br	!!.L5
  39:../src/OW.c   **** 	time = OWtimer;
 117                             		.loc 1 39 0 is_stmt 1
 118 0065 AF 00 00                		movw	ax, !_OWtimer
 119 0068 BD F0                   		movw	r8, ax
 120 006a B8 06                   		movw	[sp+6], ax
  40:../src/OW.c   **** 	if (time > 500) Presence();
 121                             		.loc 1 40 0
 122 006c 44 F4 01                		cmpw	ax, #500
 123 006f 71 FF                   		 xor1	CY, a.7
 124 0071 61 E3                   		 skh
 125 0073 EC 7B 00 00             		 br	!!.L6
 126                             		.loc 1 40 0 is_stmt 0 discriminator 1
 127 0077 FC 00 00 00             		call	!!%code(_Presence)
 128                             	.L6:
  41:../src/OW.c   **** 	sprintf(count, "OWtimer-%d\r\n", time);
 129                             		.loc 1 41 0 is_stmt 1
 130 007b 30 00 00                		movw	ax, #_count
 131 007e B8 00                   		movw	[sp], ax
 132 0080 30 00 00                		movw	ax, #.LC0
 133 0083 B8 02                   		movw	[sp+2], ax
 134 0085 A8 06                   		movw	ax, [sp+6]
 135 0087 BD F0                   		movw	r8, ax
 136 0089 B8 04                   		movw	[sp+4], ax
 137 008b FC 00 00 00             		call	!!%code(_sprintf)
  42:../src/OW.c   **** 	//UART_Tx(count);
  43:../src/OW.c   **** }
 138                             		.loc 1 43 0
 139 008f 10 08                   		addw	sp, #8
 140 0091 D7                      		ret
 141                             	.LFE1:
 143                             		.global	_Presence
 145                             	_Presence:
 146                             	.LFB2:
  44:../src/OW.c   **** 
  45:../src/OW.c   **** void Presence(){
 147                             		.loc 1 45 0
 148                             		; start of function
 149                             		; outgoing: 2 bytes
 150 0092 20 02                   		subw	sp, #2
 151                             	.LCFI1:
  46:../src/OW.c   **** 	usDelay(20);		//wait 20 us
 152                             		.loc 1 46 0
 153 0094 30 14 00                		movw	ax, #20
 154 0097 B8 00                   		movw	[sp], ax
 155 0099 FC 00 00 00             		call	!!%code(_usDelay)
  47:../src/OW.c   **** 	TAGI = 1;			//pull OW line line low
 156                             		.loc 1 47 0
 157 009d C9 F0 05 FF             		movw	r8, #-251
 158 00a1 AD F0                   		movw	ax, r8
 159 00a3 BD F2                   		movw	r10, ax
 160 00a5 FA F2                   		movw	hl, r10
 161 00a7 71 92                   		set1	[hl].1 ;insvmisalignqi [hl],#1,#1,#1 {0}
  48:../src/OW.c   **** 	usDelay(60);		//hold OW line low for 60us
 162                             		.loc 1 48 0
 163 00a9 30 3C 00                		movw	ax, #60
 164 00ac B8 00                   		movw	[sp], ax
 165 00ae FC 00 00 00             		call	!!%code(_usDelay)
  49:../src/OW.c   **** 	TAGI = 0;			//release OW line
 166                             		.loc 1 49 0
 167 00b2 C9 F0 05 FF             		movw	r8, #-251
 168 00b6 AD F0                   		movw	ax, r8
 169 00b8 BD F2                   		movw	r10, ax
 170 00ba FA F2                   		movw	hl, r10
 171 00bc 71 93                   		clr1	[hl].1 ;insvmisalignqi [hl],#1,#1,#0 {0}
  50:../src/OW.c   **** 	ReadByte();
 172                             		.loc 1 50 0
 173 00be FC 00 00 00             		call	!!%code(_ReadByte)
  51:../src/OW.c   **** }
 174                             		.loc 1 51 0
 175 00c2 10 02                   		addw	sp, #2
 176 00c4 D7                      		ret
 177                             	.LFE2:
 179                             		.section	.rodata
 180                             	.LC1:
 181 000d 4F 57 20 64 61 74 61 2D 		.string	"OW data-%x\r\n"
 181      25 78 0D 0A 00 
 182                             	.text
 183                             		.global	_ReadByte
 185                             	_ReadByte:
 186                             	.LFB3:
  52:../src/OW.c   **** 
  53:../src/OW.c   **** void ReadByte(){
 187                             		.loc 1 53 0
 188                             		; start of function
 189                             		; locals: 4 bytes
 190                             		; outgoing: 6 bytes
 191 00c5 20 0A                   		subw	sp, #10
 192                             	.LCFI2:
  54:../src/OW.c   **** 	char data = 0;
 193                             		.loc 1 54 0
 194 00c7 F1                      		clrb	a
 195 00c8 98 09                   		mov	[sp+9], a
  55:../src/OW.c   **** 	char bitPlace = 1;
 196                             		.loc 1 55 0
 197 00ca E1                      		oneb	a
 198 00cb 98 08                   		mov	[sp+8], a
  56:../src/OW.c   **** 	char bitCount = 8;
 199                             		.loc 1 56 0
 200 00cd 51 08                   		mov	a, #8
 201 00cf 98 07                   		mov	[sp+7], a
  57:../src/OW.c   **** 	R_WDT_Restart();
 202                             		.loc 1 57 0
 203 00d1 FC 00 00 00             		call	!!%code(_R_WDT_Restart)
  58:../src/OW.c   **** 	while (bitCount > 0){
 204                             		.loc 1 58 0
 205 00d5 EC 74 01 00             		br	!!.L9
 206                             	.L14:
  59:../src/OW.c   **** 		while (TAGO == 1) 		//wait for high to low
 207                             		.loc 1 59 0
 208 00d9 EC E1 00 00             		br	!!.L10
 209                             	.L11:
  60:../src/OW.c   **** 		OWtimer = 0;
 210                             		.loc 1 60 0
 211 00dd F6                      		clrw	ax
 212 00de BF 00 00                		movw	!_OWtimer, ax
 213                             	.L10:
  59:../src/OW.c   **** 		while (TAGO == 1) 		//wait for high to low
 214                             		.loc 1 59 0
 215 00e1 C9 F0 03 FF             		movw	r8, #-253
 216 00e5 AD F0                   		movw	ax, r8
 217 00e7 BD F2                   		movw	r10, ax
 218 00e9 FA F2                   		movw	hl, r10
 219 00eb 8B                      		mov	a, [hl]
 220 00ec 31 69                   		shl	a, 6
 221 00ee 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 222 00f0 9D F0                   		mov	r8, a
 223 00f2 4A F0 01                		cmp	r8, #1
 224 00f5 61 F8                   		 sknz
 225 00f7 EC DD 00 00             		 br	!!.L11
  61:../src/OW.c   **** 		usDelay(3);
 226                             		.loc 1 61 0
 227 00fb 30 03 00                		movw	ax, #3
 228 00fe B8 00                   		movw	[sp], ax
 229 0100 FC 00 00 00             		call	!!%code(_usDelay)
  62:../src/OW.c   **** 		LED2 ^= 1;
 230                             		.loc 1 62 0
 231 0104 C9 F2 02 FF             		movw	r10, #-254
 232 0108 C9 F0 02 FF             		movw	r8, #-254
 233 010c AD F0                   		movw	ax, r8
 234 010e BD F4                   		movw	r12, ax
 235 0110 FA F4                   		movw	hl, r12
 236 0112 8B                      		mov	a, [hl]
 237 0113 31 59                   		shl	a, 5
 238 0115 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#2
 239 0117 9D F0                   		mov	r8, a
 240 0119 7A F0 01                		xor	r8, #1
 241 011c 5A F0 01                		and	r8, #1
 242 011f AD F2                   		movw	ax, r10
 243 0121 BD F4                   		movw	r12, ax
 244 0123 FA F4                   		movw	hl, r12
 245 0125 71 04 F0                		mov1	CY, r8.0
 246 0128 71 A1                   		mov1	[hl].2, CY ;insvmisalignqi [hl],#1,#2,r8 {0}
  63:../src/OW.c   **** 		if (TAGO == 1) data |= bitPlace;
 247                             		.loc 1 63 0
 248 012a C9 F0 03 FF             		movw	r8, #-253
 249 012e AD F0                   		movw	ax, r8
 250 0130 BD F2                   		movw	r10, ax
 251 0132 FA F2                   		movw	hl, r10
 252 0134 8B                      		mov	a, [hl]
 253 0135 31 69                   		shl	a, 6
 254 0137 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 255 0139 9D F0                   		mov	r8, a
 256 013b 4A F0 01                		cmp	r8, #1
 257 013e 61 E8                   		 skz
 258 0140 EC 4D 01 00             		 br	!!.L12
 259                             		.loc 1 63 0 is_stmt 0 discriminator 1
 260 0144 88 08                   		mov	a, [sp+8]
 261 0146 72                      		mov	c, a
 262 0147 88 09                   		mov	a, [sp+9]
 263 0149 61 6A                   		or	a, c
 264 014b 98 09                   		mov	[sp+9], a
 265                             	.L12:
  64:../src/OW.c   **** 		bitPlace = bitPlace << 1;
 266                             		.loc 1 64 0 is_stmt 1
 267 014d 88 08                   		mov	a, [sp+8]
 268 014f 61 01                   		add	a, a
 269 0151 98 08                   		mov	[sp+8], a
  65:../src/OW.c   **** 		bitCount--;
 270                             		.loc 1 65 0
 271 0153 88 07                   		mov	a, [sp+7]
 272 0155 9D F0                   		mov	r8, a
 273 0157 91                      		dec	a
 274 0158 98 07                   		mov	[sp+7], a
  66:../src/OW.c   **** 		while (TAGO == 0);		//wait for line to go high
 275                             		.loc 1 66 0
 276 015a 00                      		nop
 277                             	.L13:
 278                             		.loc 1 66 0 is_stmt 0 discriminator 1
 279 015b C9 F0 03 FF             		movw	r8, #-253
 280 015f AD F0                   		movw	ax, r8
 281 0161 BD F4                   		movw	r12, ax
 282 0163 FA F4                   		movw	hl, r12
 283 0165 8B                      		mov	a, [hl]
 284 0166 31 69                   		shl	a, 6
 285 0168 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 286 016a 9D F0                   		mov	r8, a
 287 016c D4 F0                   		cmp0	r8
 288 016e 61 F8                   		 sknz
 289 0170 EC 5B 01 00             		 br	!!.L13
 290                             	.L9:
  58:../src/OW.c   **** 		while (TAGO == 1) 		//wait for high to low
 291                             		.loc 1 58 0 is_stmt 1
 292 0174 88 07                   		mov	a, [sp+7]
 293 0176 D1                      		cmp0	a
 294 0177 61 E8                   		 skz
 295 0179 EC D9 00 00             		 br	!!.L14
  67:../src/OW.c   **** 	}
  68:../src/OW.c   **** 	//if (data == 0x33) txData();
  69:../src/OW.c   **** 	ProcessByte(data);
 296                             		.loc 1 69 0
 297 017d 88 09                   		mov	a, [sp+9]
 298 017f 9D F0                   		mov	r8, a
 299 0181 98 00                   		mov	[sp], a
 300 0183 FC 00 00 00             		call	!!%code(_ProcessByte)
  70:../src/OW.c   **** 	sprintf(count, "OW data-%x\r\n", data);
 301                             		.loc 1 70 0
 302 0187 88 09                   		mov	a, [sp+9]
 303 0189 31 8E                   		shrw	ax, 8
 304 018b BD F0                   		movw	r8, ax
 305 018d 30 00 00                		movw	ax, #_count
 306 0190 B8 00                   		movw	[sp], ax
 307 0192 30 0D 00                		movw	ax, #.LC1
 308 0195 B8 02                   		movw	[sp+2], ax
 309 0197 AD F0                   		movw	ax, r8
 310 0199 B8 04                   		movw	[sp+4], ax
 311 019b FC 00 00 00             		call	!!%code(_sprintf)
  71:../src/OW.c   **** 	UART_Tx(count);
 312                             		.loc 1 71 0
 313 019f 30 00 00                		movw	ax, #_count
 314 01a2 B8 00                   		movw	[sp], ax
 315 01a4 FC 00 00 00             		call	!!%code(_UART_Tx)
  72:../src/OW.c   **** }
 316                             		.loc 1 72 0
 317 01a8 10 0A                   		addw	sp, #10
 318 01aa D7                      		ret
 319                             	.LFE3:
 321                             		.section	.rodata
 322                             	.LC2:
 323 001a 52 65 73 65 74 20 72 65 		.string	"Reset received Testing MK9 unit inputs....\r\n"
 323      63 65 69 76 65 64 20 54 
 323      65 73 74 69 6E 67 20 4D 
 323      4B 39 20 75 6E 69 74 20 
 323      69 6E 70 75 74 73 2E 2E 
 324                             	.LC3:
 325 0047 54 65 73 74 69 6E 67 20 		.string	"Testing MK9 unit outputs....\r\n"
 325      4D 4B 39 20 75 6E 69 74 
 325      20 6F 75 74 70 75 74 73 
 325      2E 2E 2E 2E 0D 0A 00 
 326                             	.LC4:
 327 0066 54 65 73 74 20 63 6F 6D 		.string	"Test complete\r\n"
 327      70 6C 65 74 65 0D 0A 00 
 328                             	.LC5:
 329 0076 49 47 4E 20 74 72 69 67 		.string	"IGN trigger faulty\r\n"
 329      67 65 72 20 66 61 75 6C 
 329      74 79 0D 0A 00 
 330                             	.LC6:
 331 008b 50 61 6E 69 63 20 74 72 		.string	"Panic trigger faulty\r\n"
 331      69 67 67 65 72 20 66 61 
 331      75 6C 74 79 0D 0A 00 
 332                             	.LC7:
 333 00a2 49 6E 70 75 74 31 20 74 		.string	"Input1 trigger faulty\r\n"
 333      72 69 67 67 65 72 20 66 
 333      61 75 6C 74 79 0D 0A 00 
 334                             	.LC8:
 335 00ba 49 6E 70 75 74 32 20 74 		.string	"Input2 trigger faulty\r\n"
 335      72 69 67 67 65 72 20 66 
 335      61 75 6C 74 79 0D 0A 00 
 336                             	.LC9:
 337 00d2 49 6E 70 75 74 33 20 74 		.string	"Input3 trigger faulty\r\n"
 337      72 69 67 67 65 72 20 66 
 337      61 75 6C 74 79 0D 0A 00 
 338                             	.LC10:
 339 00ea 52 50 4D 20 74 72 69 67 		.string	"RPM trigger faulty\r\n"
 339      67 65 72 20 66 61 75 6C 
 339      74 79 0D 0A 00 
 340                             	.LC11:
 341 00ff 49 47 4E 20 64 65 66 61 		.string	"IGN default faulty\r\n"
 341      75 6C 74 20 66 61 75 6C 
 341      74 79 0D 0A 00 
 342                             	.LC12:
 343 0114 50 61 6E 69 63 20 64 65 		.string	"Panic default faulty\r\n"
 343      66 61 75 6C 74 20 66 61 
 343      75 6C 74 79 0D 0A 00 
 344                             	.LC13:
 345 012b 49 6E 70 75 74 31 20 64 		.string	"Input1 default faulty\r\n"
 345      65 66 61 75 6C 74 20 66 
 345      61 75 6C 74 79 0D 0A 00 
 346                             	.LC14:
 347 0143 49 6E 70 75 74 32 20 64 		.string	"Input2 default faulty\r\n"
 347      65 66 61 75 6C 74 20 66 
 347      61 75 6C 74 79 0D 0A 00 
 348                             	.LC15:
 349 015b 49 6E 70 75 74 33 20 64 		.string	"Input3 default faulty\r\n"
 349      65 66 61 75 6C 74 20 66 
 349      61 75 6C 74 79 0D 0A 00 
 350                             	.LC16:
 351 0173 52 50 4D 20 64 65 66 61 		.string	"RPM default faulty\r\n"
 351      75 6C 74 20 66 61 75 6C 
 351      74 79 0D 0A 00 
 352                             	.text
 353                             		.global	_ProcessByte
 355                             	_ProcessByte:
 356                             	.LFB4:
  73:../src/OW.c   **** 
  74:../src/OW.c   **** void ProcessByte(char dataR){
 357                             		.loc 1 74 0
 358                             		; start of function
 359                             		; outgoing: 2 bytes
 360 01ab 20 02                   		subw	sp, #2
 361                             	.LCFI3:
  75:../src/OW.c   **** 
  76:../src/OW.c   **** 	if (dataR == 0x33){
 362                             		.loc 1 76 0
 363 01ad 88 06                   		mov	a, [sp+6]
 364 01af 4C 33                   		cmp	a, #51
 365 01b1 61 E8                   		 skz
 366 01b3 EC F2 01 00             		 br	!!.L16
 367                             	.LBB2:
  77:../src/OW.c   **** 		//
  78:../src/OW.c   **** 		txData();
 368                             		.loc 1 78 0
 369 01b7 FC 00 00 00             		call	!!%code(_txData)
  79:../src/OW.c   **** 		UART_Tx("Reset received Testing MK9 unit inputs....\r\n");
 370                             		.loc 1 79 0
 371 01bb 30 1A 00                		movw	ax, #.LC2
 372 01be B8 00                   		movw	[sp], ax
 373 01c0 FC 00 00 00             		call	!!%code(_UART_Tx)
  80:../src/OW.c   **** 		LED1 ^= 1;
 374                             		.loc 1 80 0
 375 01c4 C9 F2 02 FF             		movw	r10, #-254
 376 01c8 C9 F0 02 FF             		movw	r8, #-254
 377 01cc AD F0                   		movw	ax, r8
 378 01ce BD F4                   		movw	r12, ax
 379 01d0 FA F4                   		movw	hl, r12
 380 01d2 8B                      		mov	a, [hl]
 381 01d3 31 69                   		shl	a, 6
 382 01d5 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 383 01d7 9D F0                   		mov	r8, a
 384 01d9 7A F0 01                		xor	r8, #1
 385 01dc 5A F0 01                		and	r8, #1
 386 01df AD F2                   		movw	ax, r10
 387 01e1 BD F4                   		movw	r12, ax
 388 01e3 FA F4                   		movw	hl, r12
 389 01e5 71 04 F0                		mov1	CY, r8.0
 390 01e8 71 91                   		mov1	[hl].1, CY ;insvmisalignqi [hl],#1,#1,r8 {0}
  81:../src/OW.c   **** 		Reset();
 391                             		.loc 1 81 0
 392 01ea FC 00 00 00             		call	!!%code(_Reset)
 393                             	.LBE2:
 394 01ee EC BC 04 00             		br	!!.L15
 395                             	.L16:
  82:../src/OW.c   **** 	}
  83:../src/OW.c   **** 	else if (dataR == 0x34){
 396                             		.loc 1 83 0
 397 01f2 88 06                   		mov	a, [sp+6]
 398 01f4 4C 34                   		cmp	a, #52
 399 01f6 61 E8                   		 skz
 400 01f8 EC 2E 02 00             		 br	!!.L18
  84:../src/OW.c   **** 		txData();
 401                             		.loc 1 84 0
 402 01fc FC 00 00 00             		call	!!%code(_txData)
  85:../src/OW.c   **** 		SetIGN();
 403                             		.loc 1 85 0
 404 0200 FC 00 00 00             		call	!!%code(_SetIGN)
  86:../src/OW.c   **** 		LED2 ^= 1;
 405                             		.loc 1 86 0
 406 0204 C9 F2 02 FF             		movw	r10, #-254
 407 0208 C9 F0 02 FF             		movw	r8, #-254
 408 020c AD F0                   		movw	ax, r8
 409 020e BD F4                   		movw	r12, ax
 410 0210 FA F4                   		movw	hl, r12
 411 0212 8B                      		mov	a, [hl]
 412 0213 31 59                   		shl	a, 5
 413 0215 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#2
 414 0217 9D F0                   		mov	r8, a
 415 0219 7A F0 01                		xor	r8, #1
 416 021c 5A F0 01                		and	r8, #1
 417 021f AD F2                   		movw	ax, r10
 418 0221 BD F4                   		movw	r12, ax
 419 0223 FA F4                   		movw	hl, r12
 420 0225 71 04 F0                		mov1	CY, r8.0
 421 0228 71 A1                   		mov1	[hl].2, CY ;insvmisalignqi [hl],#1,#2,r8 {0}
 422 022a EC BC 04 00             		br	!!.L15
 423                             	.L18:
  87:../src/OW.c   **** 	}
  88:../src/OW.c   **** 	else if (dataR == 0x35){
 424                             		.loc 1 88 0
 425 022e 88 06                   		mov	a, [sp+6]
 426 0230 4C 35                   		cmp	a, #53
 427 0232 61 E8                   		 skz
 428 0234 EC 6A 02 00             		 br	!!.L19
  89:../src/OW.c   **** 		txData();
 429                             		.loc 1 89 0
 430 0238 FC 00 00 00             		call	!!%code(_txData)
  90:../src/OW.c   **** 		SetRPM();
 431                             		.loc 1 90 0
 432 023c FC 00 00 00             		call	!!%code(_SetRPM)
  91:../src/OW.c   **** 		LED3 ^= 1;
 433                             		.loc 1 91 0
 434 0240 C9 F2 02 FF             		movw	r10, #-254
 435 0244 C9 F0 02 FF             		movw	r8, #-254
 436 0248 AD F0                   		movw	ax, r8
 437 024a BD F4                   		movw	r12, ax
 438 024c FA F4                   		movw	hl, r12
 439 024e 8B                      		mov	a, [hl]
 440 024f 31 49                   		shl	a, 4
 441 0251 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#3
 442 0253 9D F0                   		mov	r8, a
 443 0255 7A F0 01                		xor	r8, #1
 444 0258 5A F0 01                		and	r8, #1
 445 025b AD F2                   		movw	ax, r10
 446 025d BD F4                   		movw	r12, ax
 447 025f FA F4                   		movw	hl, r12
 448 0261 71 04 F0                		mov1	CY, r8.0
 449 0264 71 B1                   		mov1	[hl].3, CY ;insvmisalignqi [hl],#1,#3,r8 {0}
 450 0266 EC BC 04 00             		br	!!.L15
 451                             	.L19:
  92:../src/OW.c   **** 	}
  93:../src/OW.c   **** 	else if (dataR == 0x36){
 452                             		.loc 1 93 0
 453 026a 88 06                   		mov	a, [sp+6]
 454 026c 4C 36                   		cmp	a, #54
 455 026e 61 E8                   		 skz
 456 0270 EC A4 02 00             		 br	!!.L20
  94:../src/OW.c   **** 		txData();
 457                             		.loc 1 94 0
 458 0274 FC 00 00 00             		call	!!%code(_txData)
  95:../src/OW.c   **** 		SetPanic();
 459                             		.loc 1 95 0
 460 0278 FC 00 00 00             		call	!!%code(_SetPanic)
  96:../src/OW.c   **** 		LED4 ^= 1;
 461                             		.loc 1 96 0
 462 027c C9 F2 0E FF             		movw	r10, #-242
 463 0280 C9 F0 0E FF             		movw	r8, #-242
 464 0284 AD F0                   		movw	ax, r8
 465 0286 BD F4                   		movw	r12, ax
 466 0288 FA F4                   		movw	hl, r12
 467 028a 8B                      		mov	a, [hl]
 468 028b 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#7
 469 028d 9D F0                   		mov	r8, a
 470 028f 7A F0 01                		xor	r8, #1
 471 0292 5A F0 01                		and	r8, #1
 472 0295 AD F2                   		movw	ax, r10
 473 0297 BD F4                   		movw	r12, ax
 474 0299 FA F4                   		movw	hl, r12
 475 029b 71 04 F0                		mov1	CY, r8.0
 476 029e 71 F1                   		mov1	[hl].7, CY ;insvmisalignqi [hl],#1,#7,r8 {0}
 477 02a0 EC BC 04 00             		br	!!.L15
 478                             	.L20:
  97:../src/OW.c   **** 	}
  98:../src/OW.c   **** 	else if (dataR == 0x37){
 479                             		.loc 1 98 0
 480 02a4 88 06                   		mov	a, [sp+6]
 481 02a6 4C 37                   		cmp	a, #55
 482 02a8 61 E8                   		 skz
 483 02aa EC DE 02 00             		 br	!!.L21
  99:../src/OW.c   **** 		txData();
 484                             		.loc 1 99 0
 485 02ae FC 00 00 00             		call	!!%code(_txData)
 100:../src/OW.c   **** 		SetInputA();
 486                             		.loc 1 100 0
 487 02b2 FC 00 00 00             		call	!!%code(_SetInputA)
 101:../src/OW.c   **** 		LED5 ^= 1;
 488                             		.loc 1 101 0
 489 02b6 C9 F2 01 FF             		movw	r10, #-255
 490 02ba C9 F0 01 FF             		movw	r8, #-255
 491 02be AD F0                   		movw	ax, r8
 492 02c0 BD F4                   		movw	r12, ax
 493 02c2 FA F4                   		movw	hl, r12
 494 02c4 8B                      		mov	a, [hl]
 495 02c5 5C 01                   		and	a, #1 ;extzvmisalignqi a,[hl],#1,#0
 496 02c7 9D F0                   		mov	r8, a
 497 02c9 7A F0 01                		xor	r8, #1
 498 02cc 5A F0 01                		and	r8, #1
 499 02cf AD F2                   		movw	ax, r10
 500 02d1 BD F4                   		movw	r12, ax
 501 02d3 FA F4                   		movw	hl, r12
 502 02d5 71 04 F0                		mov1	CY, r8.0
 503 02d8 71 81                   		mov1	[hl].0, CY ;insvmisalignqi [hl],#1,#0,r8 {0}
 504 02da EC BC 04 00             		br	!!.L15
 505                             	.L21:
 102:../src/OW.c   **** 	}
 103:../src/OW.c   **** 	else if (dataR == 0x38){
 506                             		.loc 1 103 0
 507 02de 88 06                   		mov	a, [sp+6]
 508 02e0 4C 38                   		cmp	a, #56
 509 02e2 61 E8                   		 skz
 510 02e4 EC 1A 03 00             		 br	!!.L22
 104:../src/OW.c   **** 		txData();
 511                             		.loc 1 104 0
 512 02e8 FC 00 00 00             		call	!!%code(_txData)
 105:../src/OW.c   **** 		SetInputB();
 513                             		.loc 1 105 0
 514 02ec FC 00 00 00             		call	!!%code(_SetInputB)
 106:../src/OW.c   **** 		LED6 ^= 1;
 515                             		.loc 1 106 0
 516 02f0 C9 F2 01 FF             		movw	r10, #-255
 517 02f4 C9 F0 01 FF             		movw	r8, #-255
 518 02f8 AD F0                   		movw	ax, r8
 519 02fa BD F4                   		movw	r12, ax
 520 02fc FA F4                   		movw	hl, r12
 521 02fe 8B                      		mov	a, [hl]
 522 02ff 31 69                   		shl	a, 6
 523 0301 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 524 0303 9D F0                   		mov	r8, a
 525 0305 7A F0 01                		xor	r8, #1
 526 0308 5A F0 01                		and	r8, #1
 527 030b AD F2                   		movw	ax, r10
 528 030d BD F4                   		movw	r12, ax
 529 030f FA F4                   		movw	hl, r12
 530 0311 71 04 F0                		mov1	CY, r8.0
 531 0314 71 91                   		mov1	[hl].1, CY ;insvmisalignqi [hl],#1,#1,r8 {0}
 532 0316 EC BC 04 00             		br	!!.L15
 533                             	.L22:
 107:../src/OW.c   **** 	}
 108:../src/OW.c   **** 	else if (dataR == 0x39){
 534                             		.loc 1 108 0
 535 031a 88 06                   		mov	a, [sp+6]
 536 031c 4C 39                   		cmp	a, #57
 537 031e 61 E8                   		 skz
 538 0320 EC 30 03 00             		 br	!!.L23
 109:../src/OW.c   **** 		txData();
 539                             		.loc 1 109 0
 540 0324 FC 00 00 00             		call	!!%code(_txData)
 110:../src/OW.c   **** 		SetInputC();
 541                             		.loc 1 110 0
 542 0328 FC 00 00 00             		call	!!%code(_SetInputC)
 543 032c EC BC 04 00             		br	!!.L15
 544                             	.L23:
 111:../src/OW.c   **** 
 112:../src/OW.c   **** 	}
 113:../src/OW.c   **** 	else if (dataR == 0x3A){
 545                             		.loc 1 113 0
 546 0330 88 06                   		mov	a, [sp+6]
 547 0332 4C 3A                   		cmp	a, #58
 548 0334 61 E8                   		 skz
 549 0336 EC 4B 03 00             		 br	!!.L24
 550                             	.LBB3:
 114:../src/OW.c   **** 		txData();
 551                             		.loc 1 114 0
 552 033a FC 00 00 00             		call	!!%code(_txData)
 115:../src/OW.c   **** 		UART_Tx("Testing MK9 unit outputs....\r\n");
 553                             		.loc 1 115 0
 554 033e 30 47 00                		movw	ax, #.LC3
 555 0341 B8 00                   		movw	[sp], ax
 556 0343 FC 00 00 00             		call	!!%code(_UART_Tx)
 557                             	.LBE3:
 558 0347 EC BC 04 00             		br	!!.L15
 559                             	.L24:
 116:../src/OW.c   **** 
 117:../src/OW.c   **** 	}
 118:../src/OW.c   **** 	else if (dataR == 0x3B){
 560                             		.loc 1 118 0
 561 034b 88 06                   		mov	a, [sp+6]
 562 034d 4C 3B                   		cmp	a, #59
 563 034f 61 E8                   		 skz
 564 0351 EC 61 03 00             		 br	!!.L25
 119:../src/OW.c   **** 		txData();
 565                             		.loc 1 119 0
 566 0355 FC 00 00 00             		call	!!%code(_txData)
 120:../src/OW.c   **** 		ReadDefault();
 567                             		.loc 1 120 0
 568 0359 FC 00 00 00             		call	!!%code(_ReadDefault)
 569 035d EC BC 04 00             		br	!!.L15
 570                             	.L25:
 121:../src/OW.c   **** 
 122:../src/OW.c   **** 	}
 123:../src/OW.c   **** 	else if (dataR == 0x3C){
 571                             		.loc 1 123 0
 572 0361 88 06                   		mov	a, [sp+6]
 573 0363 4C 3C                   		cmp	a, #60
 574 0365 61 E8                   		 skz
 575 0367 EC 77 03 00             		 br	!!.L26
 124:../src/OW.c   **** 		txData();
 576                             		.loc 1 124 0
 577 036b FC 00 00 00             		call	!!%code(_txData)
 125:../src/OW.c   **** 		ReadImmob();
 578                             		.loc 1 125 0
 579 036f FC 00 00 00             		call	!!%code(_ReadImmob)
 580 0373 EC BC 04 00             		br	!!.L15
 581                             	.L26:
 126:../src/OW.c   **** 
 127:../src/OW.c   **** 	}
 128:../src/OW.c   **** 	else if (dataR == 0x3D){
 582                             		.loc 1 128 0
 583 0377 88 06                   		mov	a, [sp+6]
 584 0379 4C 3D                   		cmp	a, #61
 585 037b 61 E8                   		 skz
 586 037d EC 8D 03 00             		 br	!!.L27
 129:../src/OW.c   **** 		txData();
 587                             		.loc 1 129 0
 588 0381 FC 00 00 00             		call	!!%code(_txData)
 130:../src/OW.c   **** 		ReadOutput();
 589                             		.loc 1 130 0
 590 0385 FC 00 00 00             		call	!!%code(_ReadOutput)
 591 0389 EC BC 04 00             		br	!!.L15
 592                             	.L27:
 131:../src/OW.c   **** 
 132:../src/OW.c   **** 	}
 133:../src/OW.c   **** 	else if (dataR == 0x3E){
 593                             		.loc 1 133 0
 594 038d 88 06                   		mov	a, [sp+6]
 595 038f 4C 3E                   		cmp	a, #62
 596 0391 61 E8                   		 skz
 597 0393 EC AC 03 00             		 br	!!.L28
 598                             	.LBB4:
 134:../src/OW.c   **** 		txData();
 599                             		.loc 1 134 0
 600 0397 FC 00 00 00             		call	!!%code(_txData)
 135:../src/OW.c   **** 		ReadLED();
 601                             		.loc 1 135 0
 602 039b FC 00 00 00             		call	!!%code(_ReadLED)
 136:../src/OW.c   **** 		UART_Tx("Test complete\r\n");
 603                             		.loc 1 136 0
 604 039f 30 66 00                		movw	ax, #.LC4
 605 03a2 B8 00                   		movw	[sp], ax
 606 03a4 FC 00 00 00             		call	!!%code(_UART_Tx)
 607                             	.LBE4:
 608 03a8 EC BC 04 00             		br	!!.L15
 609                             	.L28:
 137:../src/OW.c   **** 	}
 138:../src/OW.c   **** 	else if (dataR == 0x53){
 610                             		.loc 1 138 0
 611 03ac 88 06                   		mov	a, [sp+6]
 612 03ae 4C 53                   		cmp	a, #83
 613 03b0 61 E8                   		 skz
 614 03b2 EC C3 03 00             		 br	!!.L29
 615                             	.LBB5:
 139:../src/OW.c   **** 
 140:../src/OW.c   **** 		UART_Tx("IGN trigger faulty\r\n");
 616                             		.loc 1 140 0
 617 03b6 30 76 00                		movw	ax, #.LC5
 618 03b9 B8 00                   		movw	[sp], ax
 619 03bb FC 00 00 00             		call	!!%code(_UART_Tx)
 620                             	.LBE5:
 621 03bf EC BC 04 00             		br	!!.L15
 622                             	.L29:
 141:../src/OW.c   **** 
 142:../src/OW.c   **** 	}
 143:../src/OW.c   **** 	else if (dataR == 0x54){
 623                             		.loc 1 143 0
 624 03c3 88 06                   		mov	a, [sp+6]
 625 03c5 4C 54                   		cmp	a, #84
 626 03c7 61 E8                   		 skz
 627 03c9 EC DA 03 00             		 br	!!.L30
 628                             	.LBB6:
 144:../src/OW.c   **** 		UART_Tx("Panic trigger faulty\r\n");
 629                             		.loc 1 144 0
 630 03cd 30 8B 00                		movw	ax, #.LC6
 631 03d0 B8 00                   		movw	[sp], ax
 632 03d2 FC 00 00 00             		call	!!%code(_UART_Tx)
 633                             	.LBE6:
 634 03d6 EC BC 04 00             		br	!!.L15
 635                             	.L30:
 145:../src/OW.c   **** 
 146:../src/OW.c   **** 	}
 147:../src/OW.c   **** 	else if (dataR == 0x55){
 636                             		.loc 1 147 0
 637 03da 88 06                   		mov	a, [sp+6]
 638 03dc 4C 55                   		cmp	a, #85
 639 03de 61 E8                   		 skz
 640 03e0 EC F1 03 00             		 br	!!.L31
 641                             	.LBB7:
 148:../src/OW.c   **** 		UART_Tx("Input1 trigger faulty\r\n");
 642                             		.loc 1 148 0
 643 03e4 30 A2 00                		movw	ax, #.LC7
 644 03e7 B8 00                   		movw	[sp], ax
 645 03e9 FC 00 00 00             		call	!!%code(_UART_Tx)
 646                             	.LBE7:
 647 03ed EC BC 04 00             		br	!!.L15
 648                             	.L31:
 149:../src/OW.c   **** 
 150:../src/OW.c   **** 	}
 151:../src/OW.c   **** 	else if (dataR == 0x56){
 649                             		.loc 1 151 0
 650 03f1 88 06                   		mov	a, [sp+6]
 651 03f3 4C 56                   		cmp	a, #86
 652 03f5 61 E8                   		 skz
 653 03f7 EC 08 04 00             		 br	!!.L32
 654                             	.LBB8:
 152:../src/OW.c   **** 		UART_Tx("Input2 trigger faulty\r\n");
 655                             		.loc 1 152 0
 656 03fb 30 BA 00                		movw	ax, #.LC8
 657 03fe B8 00                   		movw	[sp], ax
 658 0400 FC 00 00 00             		call	!!%code(_UART_Tx)
 659                             	.LBE8:
 660 0404 EC BC 04 00             		br	!!.L15
 661                             	.L32:
 153:../src/OW.c   **** 
 154:../src/OW.c   **** 	}
 155:../src/OW.c   **** 	else if (dataR == 0x57){
 662                             		.loc 1 155 0
 663 0408 88 06                   		mov	a, [sp+6]
 664 040a 4C 57                   		cmp	a, #87
 665 040c 61 E8                   		 skz
 666 040e EC 1F 04 00             		 br	!!.L33
 667                             	.LBB9:
 156:../src/OW.c   **** 		UART_Tx("Input3 trigger faulty\r\n");
 668                             		.loc 1 156 0
 669 0412 30 D2 00                		movw	ax, #.LC9
 670 0415 B8 00                   		movw	[sp], ax
 671 0417 FC 00 00 00             		call	!!%code(_UART_Tx)
 672                             	.LBE9:
 673 041b EC BC 04 00             		br	!!.L15
 674                             	.L33:
 157:../src/OW.c   **** 
 158:../src/OW.c   **** 	}
 159:../src/OW.c   **** 	else if (dataR == 0x58){
 675                             		.loc 1 159 0
 676 041f 88 06                   		mov	a, [sp+6]
 677 0421 4C 58                   		cmp	a, #88
 678 0423 61 E8                   		 skz
 679 0425 EC 36 04 00             		 br	!!.L34
 680                             	.LBB10:
 160:../src/OW.c   **** 		UART_Tx("RPM trigger faulty\r\n");
 681                             		.loc 1 160 0
 682 0429 30 EA 00                		movw	ax, #.LC10
 683 042c B8 00                   		movw	[sp], ax
 684 042e FC 00 00 00             		call	!!%code(_UART_Tx)
 685                             	.LBE10:
 686 0432 EC BC 04 00             		br	!!.L15
 687                             	.L34:
 161:../src/OW.c   **** 
 162:../src/OW.c   **** 	}
 163:../src/OW.c   **** 	else if (dataR == 0x63){
 688                             		.loc 1 163 0
 689 0436 88 06                   		mov	a, [sp+6]
 690 0438 4C 63                   		cmp	a, #99
 691 043a 61 E8                   		 skz
 692 043c EC 4D 04 00             		 br	!!.L35
 693                             	.LBB11:
 164:../src/OW.c   **** 		UART_Tx("IGN default faulty\r\n");
 694                             		.loc 1 164 0
 695 0440 30 FF 00                		movw	ax, #.LC11
 696 0443 B8 00                   		movw	[sp], ax
 697 0445 FC 00 00 00             		call	!!%code(_UART_Tx)
 698                             	.LBE11:
 699 0449 EC BC 04 00             		br	!!.L15
 700                             	.L35:
 165:../src/OW.c   **** 
 166:../src/OW.c   **** 	}
 167:../src/OW.c   **** 	else if (dataR == 0x64){
 701                             		.loc 1 167 0
 702 044d 88 06                   		mov	a, [sp+6]
 703 044f 4C 64                   		cmp	a, #100
 704 0451 61 E8                   		 skz
 705 0453 EC 64 04 00             		 br	!!.L36
 706                             	.LBB12:
 168:../src/OW.c   **** 		UART_Tx("Panic default faulty\r\n");
 707                             		.loc 1 168 0
 708 0457 30 14 01                		movw	ax, #.LC12
 709 045a B8 00                   		movw	[sp], ax
 710 045c FC 00 00 00             		call	!!%code(_UART_Tx)
 711                             	.LBE12:
 712 0460 EC BC 04 00             		br	!!.L15
 713                             	.L36:
 169:../src/OW.c   **** 
 170:../src/OW.c   **** 	}
 171:../src/OW.c   **** 	else if (dataR == 0x65){
 714                             		.loc 1 171 0
 715 0464 88 06                   		mov	a, [sp+6]
 716 0466 4C 65                   		cmp	a, #101
 717 0468 61 E8                   		 skz
 718 046a EC 7B 04 00             		 br	!!.L37
 719                             	.LBB13:
 172:../src/OW.c   **** 		UART_Tx("Input1 default faulty\r\n");
 720                             		.loc 1 172 0
 721 046e 30 2B 01                		movw	ax, #.LC13
 722 0471 B8 00                   		movw	[sp], ax
 723 0473 FC 00 00 00             		call	!!%code(_UART_Tx)
 724                             	.LBE13:
 725 0477 EC BC 04 00             		br	!!.L15
 726                             	.L37:
 173:../src/OW.c   **** 
 174:../src/OW.c   **** 	}
 175:../src/OW.c   **** 	else if (dataR == 0x66){
 727                             		.loc 1 175 0
 728 047b 88 06                   		mov	a, [sp+6]
 729 047d 4C 66                   		cmp	a, #102
 730 047f 61 E8                   		 skz
 731 0481 EC 92 04 00             		 br	!!.L38
 732                             	.LBB14:
 176:../src/OW.c   **** 		UART_Tx("Input2 default faulty\r\n");
 733                             		.loc 1 176 0
 734 0485 30 43 01                		movw	ax, #.LC14
 735 0488 B8 00                   		movw	[sp], ax
 736 048a FC 00 00 00             		call	!!%code(_UART_Tx)
 737                             	.LBE14:
 738 048e EC BC 04 00             		br	!!.L15
 739                             	.L38:
 177:../src/OW.c   **** 
 178:../src/OW.c   **** 	}
 179:../src/OW.c   **** 	else if (dataR == 0x67){
 740                             		.loc 1 179 0
 741 0492 88 06                   		mov	a, [sp+6]
 742 0494 4C 67                   		cmp	a, #103
 743 0496 61 E8                   		 skz
 744 0498 EC A9 04 00             		 br	!!.L39
 745                             	.LBB15:
 180:../src/OW.c   **** 		UART_Tx("Input3 default faulty\r\n");
 746                             		.loc 1 180 0
 747 049c 30 5B 01                		movw	ax, #.LC15
 748 049f B8 00                   		movw	[sp], ax
 749 04a1 FC 00 00 00             		call	!!%code(_UART_Tx)
 750                             	.LBE15:
 751 04a5 EC BC 04 00             		br	!!.L15
 752                             	.L39:
 181:../src/OW.c   **** 
 182:../src/OW.c   **** 	}
 183:../src/OW.c   **** 	else if (dataR == 0x68){
 753                             		.loc 1 183 0
 754 04a9 88 06                   		mov	a, [sp+6]
 755 04ab 4C 68                   		cmp	a, #104
 756 04ad 61 E8                   		 skz
 757 04af EC BC 04 00             		 br	!!.L15
 758                             	.LBB16:
 184:../src/OW.c   **** 		UART_Tx("RPM default faulty\r\n");
 759                             		.loc 1 184 0
 760 04b3 30 73 01                		movw	ax, #.LC16
 761 04b6 B8 00                   		movw	[sp], ax
 762 04b8 FC 00 00 00             		call	!!%code(_UART_Tx)
 763                             	.L15:
 764                             	.LBE16:
 185:../src/OW.c   **** 
 186:../src/OW.c   **** 	}
 187:../src/OW.c   **** 
 188:../src/OW.c   **** }
 765                             		.loc 1 188 0
 766 04bc 10 02                   		addw	sp, #2
 767 04be D7                      		ret
 768                             	.LFE4:
 770                             		.global	_Reset
 772                             	_Reset:
 773                             	.LFB5:
 189:../src/OW.c   **** 
 190:../src/OW.c   **** void Reset(){
 774                             		.loc 1 190 0
 191:../src/OW.c   **** 	RPM = 0;
 775                             		.loc 1 191 0
 776 04bf C9 F0 02 FF             		movw	r8, #-254
 777 04c3 AD F0                   		movw	ax, r8
 778 04c5 BD F2                   		movw	r10, ax
 779 04c7 FA F2                   		movw	hl, r10
 780 04c9 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
 192:../src/OW.c   **** 	PANIC = 0;
 781                             		.loc 1 192 0
 782 04cb C9 F0 01 FF             		movw	r8, #-255
 783 04cf AD F0                   		movw	ax, r8
 784 04d1 BD F2                   		movw	r10, ax
 785 04d3 FA F2                   		movw	hl, r10
 786 04d5 71 F3                   		clr1	[hl].7 ;insvmisalignqi [hl],#1,#7,#0 {0}
 193:../src/OW.c   **** 	INPUTA = 0;
 787                             		.loc 1 193 0
 788 04d7 C9 F0 03 FF             		movw	r8, #-253
 789 04db AD F0                   		movw	ax, r8
 790 04dd BD F2                   		movw	r10, ax
 791 04df FA F2                   		movw	hl, r10
 792 04e1 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
 194:../src/OW.c   **** 	INPUTB = 0;
 793                             		.loc 1 194 0
 794 04e3 C9 F0 01 FF             		movw	r8, #-255
 795 04e7 AD F0                   		movw	ax, r8
 796 04e9 BD F2                   		movw	r10, ax
 797 04eb FA F2                   		movw	hl, r10
 798 04ed 71 D3                   		clr1	[hl].5 ;insvmisalignqi [hl],#1,#5,#0 {0}
 195:../src/OW.c   **** 	INPUTC = 0;
 799                             		.loc 1 195 0
 800 04ef C9 F0 01 FF             		movw	r8, #-255
 801 04f3 AD F0                   		movw	ax, r8
 802 04f5 BD F2                   		movw	r10, ax
 803 04f7 FA F2                   		movw	hl, r10
 804 04f9 71 E3                   		clr1	[hl].6 ;insvmisalignqi [hl],#1,#6,#0 {0}
 196:../src/OW.c   **** 	IGN = 1;
 805                             		.loc 1 196 0
 806 04fb C9 F0 0C FF             		movw	r8, #-244
 807 04ff AD F0                   		movw	ax, r8
 808 0501 BD F2                   		movw	r10, ax
 809 0503 FA F2                   		movw	hl, r10
 810 0505 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
 197:../src/OW.c   **** }
 811                             		.loc 1 197 0
 812 0507 D7                      		ret
 813                             	.LFE5:
 815                             		.global	_SetIGN
 817                             	_SetIGN:
 818                             	.LFB6:
 198:../src/OW.c   **** 
 199:../src/OW.c   **** void SetIGN(){
 819                             		.loc 1 199 0
 200:../src/OW.c   **** 	IGN = 0;
 820                             		.loc 1 200 0
 821 0508 C9 F0 0C FF             		movw	r8, #-244
 822 050c AD F0                   		movw	ax, r8
 823 050e BD F2                   		movw	r10, ax
 824 0510 FA F2                   		movw	hl, r10
 825 0512 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
 201:../src/OW.c   **** }
 826                             		.loc 1 201 0
 827 0514 D7                      		ret
 828                             	.LFE6:
 830                             		.global	_SetRPM
 832                             	_SetRPM:
 833                             	.LFB7:
 202:../src/OW.c   **** 
 203:../src/OW.c   **** void SetRPM(){
 834                             		.loc 1 203 0
 204:../src/OW.c   **** 	RPM = 1;
 835                             		.loc 1 204 0
 836 0515 C9 F0 02 FF             		movw	r8, #-254
 837 0519 AD F0                   		movw	ax, r8
 838 051b BD F2                   		movw	r10, ax
 839 051d FA F2                   		movw	hl, r10
 840 051f 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
 205:../src/OW.c   **** }
 841                             		.loc 1 205 0
 842 0521 D7                      		ret
 843                             	.LFE7:
 845                             		.global	_SetPanic
 847                             	_SetPanic:
 848                             	.LFB8:
 206:../src/OW.c   **** 
 207:../src/OW.c   **** void SetPanic(){
 849                             		.loc 1 207 0
 208:../src/OW.c   **** 	PANIC = 1;
 850                             		.loc 1 208 0
 851 0522 C9 F0 01 FF             		movw	r8, #-255
 852 0526 AD F0                   		movw	ax, r8
 853 0528 BD F2                   		movw	r10, ax
 854 052a FA F2                   		movw	hl, r10
 855 052c 71 F2                   		set1	[hl].7 ;insvmisalignqi [hl],#1,#7,#1 {0}
 209:../src/OW.c   **** }
 856                             		.loc 1 209 0
 857 052e D7                      		ret
 858                             	.LFE8:
 860                             		.global	_SetInputA
 862                             	_SetInputA:
 863                             	.LFB9:
 210:../src/OW.c   **** 
 211:../src/OW.c   **** void SetInputA(){
 864                             		.loc 1 211 0
 212:../src/OW.c   **** 	INPUTA = 1;
 865                             		.loc 1 212 0
 866 052f C9 F0 03 FF             		movw	r8, #-253
 867 0533 AD F0                   		movw	ax, r8
 868 0535 BD F2                   		movw	r10, ax
 869 0537 FA F2                   		movw	hl, r10
 870 0539 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
 213:../src/OW.c   **** }
 871                             		.loc 1 213 0
 872 053b D7                      		ret
 873                             	.LFE9:
 875                             		.global	_SetInputB
 877                             	_SetInputB:
 878                             	.LFB10:
 214:../src/OW.c   **** 
 215:../src/OW.c   **** void SetInputB(){
 879                             		.loc 1 215 0
 216:../src/OW.c   **** 	INPUTB = 1;
 880                             		.loc 1 216 0
 881 053c C9 F0 01 FF             		movw	r8, #-255
 882 0540 AD F0                   		movw	ax, r8
 883 0542 BD F2                   		movw	r10, ax
 884 0544 FA F2                   		movw	hl, r10
 885 0546 71 D2                   		set1	[hl].5 ;insvmisalignqi [hl],#1,#5,#1 {0}
 217:../src/OW.c   **** }
 886                             		.loc 1 217 0
 887 0548 D7                      		ret
 888                             	.LFE10:
 890                             		.global	_SetInputC
 892                             	_SetInputC:
 893                             	.LFB11:
 218:../src/OW.c   **** 
 219:../src/OW.c   **** void SetInputC(){
 894                             		.loc 1 219 0
 220:../src/OW.c   **** 	INPUTC = 1;
 895                             		.loc 1 220 0
 896 0549 C9 F0 01 FF             		movw	r8, #-255
 897 054d AD F0                   		movw	ax, r8
 898 054f BD F2                   		movw	r10, ax
 899 0551 FA F2                   		movw	hl, r10
 900 0553 71 E2                   		set1	[hl].6 ;insvmisalignqi [hl],#1,#6,#1 {0}
 221:../src/OW.c   **** }
 901                             		.loc 1 221 0
 902 0555 D7                      		ret
 903                             	.LFE11:
 905                             		.section	.rodata
 906                             	.LC17:
 907 0188 4F 75 74 70 75 74 41 20 		.string	"OutputA default faulty\r\n"
 907      64 65 66 61 75 6C 74 20 
 907      66 61 75 6C 74 79 0D 0A 
 907      00 
 908                             	.LC18:
 909 01a1 54 61 67 20 4C 45 44 20 		.string	"Tag LED default faulty\r\n"
 909      64 65 66 61 75 6C 74 20 
 909      66 61 75 6C 74 79 0D 0A 
 909      00 
 910                             	.LC19:
 911 01ba 49 6D 6D 6F 62 20 64 65 		.string	"Immob default faulty\r\n"
 911      66 61 75 6C 74 20 66 61 
 911      75 6C 74 79 0D 0A 00 
 912                             	.text
 913                             		.global	_ReadDefault
 915                             	_ReadDefault:
 916                             	.LFB12:
 222:../src/OW.c   **** 
 223:../src/OW.c   **** void ReadDefault(){
 917                             		.loc 1 223 0
 918                             		; start of function
 919                             		; outgoing: 2 bytes
 920 0556 20 02                   		subw	sp, #2
 921                             	.LCFI4:
 224:../src/OW.c   **** 	if (OUTPUTA == 0) UART_Tx("OutputA default faulty\r\n");
 922                             		.loc 1 224 0
 923 0558 C9 F0 0C FF             		movw	r8, #-244
 924 055c AD F0                   		movw	ax, r8
 925 055e BD F2                   		movw	r10, ax
 926 0560 FA F2                   		movw	hl, r10
 927 0562 8B                      		mov	a, [hl]
 928 0563 31 69                   		shl	a, 6
 929 0565 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 930 0567 9D F0                   		mov	r8, a
 931 0569 D4 F0                   		cmp0	r8
 932 056b 61 E8                   		 skz
 933 056d EC 7A 05 00             		 br	!!.L48
 934                             		.loc 1 224 0 is_stmt 0 discriminator 1
 935 0571 30 88 01                		movw	ax, #.LC17
 936 0574 B8 00                   		movw	[sp], ax
 937 0576 FC 00 00 00             		call	!!%code(_UART_Tx)
 938                             	.L48:
 225:../src/OW.c   **** 	if (TAGLED == 0) UART_Tx("Tag LED default faulty\r\n");
 939                             		.loc 1 225 0 is_stmt 1
 940 057a C9 F0 0C FF             		movw	r8, #-244
 941 057e AD F0                   		movw	ax, r8
 942 0580 BD F2                   		movw	r10, ax
 943 0582 FA F2                   		movw	hl, r10
 944 0584 8B                      		mov	a, [hl]
 945 0585 31 59                   		shl	a, 5
 946 0587 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#2
 947 0589 9D F0                   		mov	r8, a
 948 058b D4 F0                   		cmp0	r8
 949 058d 61 E8                   		 skz
 950 058f EC 9C 05 00             		 br	!!.L49
 951                             		.loc 1 225 0 is_stmt 0 discriminator 1
 952 0593 30 A1 01                		movw	ax, #.LC18
 953 0596 B8 00                   		movw	[sp], ax
 954 0598 FC 00 00 00             		call	!!%code(_UART_Tx)
 955                             	.L49:
 226:../src/OW.c   **** 	if (IMMOB == 0) UART_Tx("Immob default faulty\r\n");
 956                             		.loc 1 226 0 is_stmt 1
 957 059c C9 F0 0D FF             		movw	r8, #-243
 958 05a0 AD F0                   		movw	ax, r8
 959 05a2 BD F2                   		movw	r10, ax
 960 05a4 FA F2                   		movw	hl, r10
 961 05a6 8B                      		mov	a, [hl]
 962 05a7 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#7
 963 05a9 9D F0                   		mov	r8, a
 964 05ab D4 F0                   		cmp0	r8
 965 05ad 61 E8                   		 skz
 966 05af EC BC 05 00             		 br	!!.L47
 967                             		.loc 1 226 0 is_stmt 0 discriminator 1
 968 05b3 30 BA 01                		movw	ax, #.LC19
 969 05b6 B8 00                   		movw	[sp], ax
 970 05b8 FC 00 00 00             		call	!!%code(_UART_Tx)
 971                             	.L47:
 227:../src/OW.c   **** }
 972                             		.loc 1 227 0 is_stmt 1
 973 05bc 10 02                   		addw	sp, #2
 974 05be D7                      		ret
 975                             	.LFE12:
 977                             		.section	.rodata
 978                             	.LC20:
 979 01d1 49 6D 6D 6F 62 20 74 72 		.string	"Immob trigger faulty\r\n"
 979      69 67 67 65 72 20 66 61 
 979      75 6C 74 79 0D 0A 00 
 980                             	.text
 981                             		.global	_ReadImmob
 983                             	_ReadImmob:
 984                             	.LFB13:
 228:../src/OW.c   **** 
 229:../src/OW.c   **** void ReadImmob(){
 985                             		.loc 1 229 0
 986                             		; start of function
 987                             		; outgoing: 2 bytes
 988 05bf 20 02                   		subw	sp, #2
 989                             	.LCFI5:
 230:../src/OW.c   **** 	if (IMMOB == 1) UART_Tx("Immob trigger faulty\r\n");
 990                             		.loc 1 230 0
 991 05c1 C9 F0 0D FF             		movw	r8, #-243
 992 05c5 AD F0                   		movw	ax, r8
 993 05c7 BD F2                   		movw	r10, ax
 994 05c9 FA F2                   		movw	hl, r10
 995 05cb 8B                      		mov	a, [hl]
 996 05cc 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#7
 997 05ce 9D F0                   		mov	r8, a
 998 05d0 4A F0 01                		cmp	r8, #1
 999 05d3 61 E8                   		 skz
 1000 05d5 EC E2 05 00             		 br	!!.L51
 1001                             		.loc 1 230 0 is_stmt 0 discriminator 1
 1002 05d9 30 D1 01                		movw	ax, #.LC20
 1003 05dc B8 00                   		movw	[sp], ax
 1004 05de FC 00 00 00             		call	!!%code(_UART_Tx)
 1005                             	.L51:
 231:../src/OW.c   **** }
 1006                             		.loc 1 231 0 is_stmt 1
 1007 05e2 10 02                   		addw	sp, #2
 1008 05e4 D7                      		ret
 1009                             	.LFE13:
 1011                             		.section	.rodata
 1012                             	.LC21:
 1013 01e8 4F 75 74 70 75 74 41 20 		.string	"OutputA trigger faulty\r\n"
 1013      74 72 69 67 67 65 72 20 
 1013      66 61 75 6C 74 79 0D 0A 
 1013      00 
 1014                             	.text
 1015                             		.global	_ReadOutput
 1017                             	_ReadOutput:
 1018                             	.LFB14:
 232:../src/OW.c   **** 
 233:../src/OW.c   **** void ReadOutput(){
 1019                             		.loc 1 233 0
 1020                             		; start of function
 1021                             		; outgoing: 2 bytes
 1022 05e5 20 02                   		subw	sp, #2
 1023                             	.LCFI6:
 234:../src/OW.c   **** 	if (OUTPUTA == 1) UART_Tx("OutputA trigger faulty\r\n");
 1024                             		.loc 1 234 0
 1025 05e7 C9 F0 0C FF             		movw	r8, #-244
 1026 05eb AD F0                   		movw	ax, r8
 1027 05ed BD F2                   		movw	r10, ax
 1028 05ef FA F2                   		movw	hl, r10
 1029 05f1 8B                      		mov	a, [hl]
 1030 05f2 31 69                   		shl	a, 6
 1031 05f4 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 1032 05f6 9D F0                   		mov	r8, a
 1033 05f8 4A F0 01                		cmp	r8, #1
 1034 05fb 61 E8                   		 skz
 1035 05fd EC 0A 06 00             		 br	!!.L53
 1036                             		.loc 1 234 0 is_stmt 0 discriminator 1
 1037 0601 30 E8 01                		movw	ax, #.LC21
 1038 0604 B8 00                   		movw	[sp], ax
 1039 0606 FC 00 00 00             		call	!!%code(_UART_Tx)
 1040                             	.L53:
 235:../src/OW.c   **** }
 1041                             		.loc 1 235 0 is_stmt 1
 1042 060a 10 02                   		addw	sp, #2
 1043 060c D7                      		ret
 1044                             	.LFE14:
 1046                             		.section	.rodata
 1047                             	.LC22:
 1048 0201 54 61 67 20 4C 45 44 20 		.string	"Tag LED trigger faulty\r\n"
 1048      74 72 69 67 67 65 72 20 
 1048      66 61 75 6C 74 79 0D 0A 
 1048      00 
 1049                             	.text
 1050                             		.global	_ReadLED
 1052                             	_ReadLED:
 1053                             	.LFB15:
 236:../src/OW.c   **** 
 237:../src/OW.c   **** void ReadLED(){
 1054                             		.loc 1 237 0
 1055                             		; start of function
 1056                             		; outgoing: 2 bytes
 1057 060d 20 02                   		subw	sp, #2
 1058                             	.LCFI7:
 238:../src/OW.c   **** 	if (TAGLED == 1) UART_Tx("Tag LED trigger faulty\r\n");
 1059                             		.loc 1 238 0
 1060 060f C9 F0 0C FF             		movw	r8, #-244
 1061 0613 AD F0                   		movw	ax, r8
 1062 0615 BD F2                   		movw	r10, ax
 1063 0617 FA F2                   		movw	hl, r10
 1064 0619 8B                      		mov	a, [hl]
 1065 061a 31 59                   		shl	a, 5
 1066 061c 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#2
 1067 061e 9D F0                   		mov	r8, a
 1068 0620 4A F0 01                		cmp	r8, #1
 1069 0623 61 E8                   		 skz
 1070 0625 EC 32 06 00             		 br	!!.L55
 1071                             		.loc 1 238 0 is_stmt 0 discriminator 1
 1072 0629 30 01 02                		movw	ax, #.LC22
 1073 062c B8 00                   		movw	[sp], ax
 1074 062e FC 00 00 00             		call	!!%code(_UART_Tx)
 1075                             	.L55:
 239:../src/OW.c   **** }
 1076                             		.loc 1 239 0 is_stmt 1
 1077 0632 10 02                   		addw	sp, #2
 1078 0634 D7                      		ret
 1079                             	.LFE15:
 1081                             		.global	_txData
 1083                             	_txData:
 1084                             	.LFB16:
 240:../src/OW.c   **** 
 241:../src/OW.c   **** void txData(){
 1085                             		.loc 1 241 0
 1086                             		; start of function
 1087                             		; locals: 4 bytes
 1088                             		; outgoing: 2 bytes
 1089 0635 20 06                   		subw	sp, #6
 1090                             	.LCFI8:
 242:../src/OW.c   **** 	char data = 0x52;
 1091                             		.loc 1 242 0
 1092 0637 51 52                   		mov	a, #82
 1093 0639 98 03                   		mov	[sp+3], a
 243:../src/OW.c   **** 	char bit = 1;
 1094                             		.loc 1 243 0
 1095 063b E1                      		oneb	a
 1096 063c 98 05                   		mov	[sp+5], a
 244:../src/OW.c   **** 	char bitCount = 8;
 1097                             		.loc 1 244 0
 1098 063e 51 08                   		mov	a, #8
 1099 0640 98 04                   		mov	[sp+4], a
 245:../src/OW.c   **** 
 246:../src/OW.c   **** 	while (bitCount){
 1100                             		.loc 1 246 0
 1101 0642 EC BA 06 00             		br	!!.L58
 1102                             	.L62:
 247:../src/OW.c   **** 
 248:../src/OW.c   **** 		while (TAGO == 1);			//wait for clock to go low
 1103                             		.loc 1 248 0
 1104 0646 00                      		nop
 1105                             	.L59:
 1106                             		.loc 1 248 0 is_stmt 0 discriminator 1
 1107 0647 C9 F0 03 FF             		movw	r8, #-253
 1108 064b AD F0                   		movw	ax, r8
 1109 064d BD F2                   		movw	r10, ax
 1110 064f FA F2                   		movw	hl, r10
 1111 0651 8B                      		mov	a, [hl]
 1112 0652 31 69                   		shl	a, 6
 1113 0654 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 1114 0656 9D F0                   		mov	r8, a
 1115 0658 4A F0 01                		cmp	r8, #1
 1116 065b 61 F8                   		 sknz
 1117 065d EC 47 06 00             		 br	!!.L59
 249:../src/OW.c   **** 		//usDelay(2);					//master asserts low read pulse
 250:../src/OW.c   **** 		//TAGI ^= 1;
 251:../src/OW.c   **** 		if ((data&bit) == 0){		//if bit is 0 pull down OW line
 1118                             		.loc 1 251 0 is_stmt 1
 1119 0661 88 05                   		mov	a, [sp+5]
 1120 0663 72                      		mov	c, a
 1121 0664 88 03                   		mov	a, [sp+3]
 1122 0666 61 5A                   		and	a, c
 1123 0668 9D F0                   		mov	r8, a
 1124 066a D4 F0                   		cmp0	r8
 1125 066c 61 E8                   		 skz
 1126 066e EC 7E 06 00             		 br	!!.L60
 252:../src/OW.c   **** 			TAGI = 1;
 1127                             		.loc 1 252 0
 1128 0672 C9 F0 05 FF             		movw	r8, #-251
 1129 0676 AD F0                   		movw	ax, r8
 1130 0678 BD F2                   		movw	r10, ax
 1131 067a FA F2                   		movw	hl, r10
 1132 067c 71 92                   		set1	[hl].1 ;insvmisalignqi [hl],#1,#1,#1 {0}
 1133                             	.L60:
 253:../src/OW.c   **** 		}
 254:../src/OW.c   **** 		bit = bit << 1;				//shift bit to right
 1134                             		.loc 1 254 0
 1135 067e 88 05                   		mov	a, [sp+5]
 1136 0680 61 01                   		add	a, a
 1137 0682 98 05                   		mov	[sp+5], a
 255:../src/OW.c   **** 		usDelay(35);				//wait for master to read bit
 1138                             		.loc 1 255 0
 1139 0684 30 23 00                		movw	ax, #35
 1140 0687 B8 00                   		movw	[sp], ax
 1141 0689 FC 00 00 00             		call	!!%code(_usDelay)
 256:../src/OW.c   **** 		TAGI = 0;					//relaese OW line
 1142                             		.loc 1 256 0
 1143 068d C9 F0 05 FF             		movw	r8, #-251
 1144 0691 AD F0                   		movw	ax, r8
 1145 0693 BD F2                   		movw	r10, ax
 1146 0695 FA F2                   		movw	hl, r10
 1147 0697 71 93                   		clr1	[hl].1 ;insvmisalignqi [hl],#1,#1,#0 {0}
 257:../src/OW.c   **** 		while (TAGO == 0);			//wait til OW line goes high
 1148                             		.loc 1 257 0
 1149 0699 00                      		nop
 1150                             	.L61:
 1151                             		.loc 1 257 0 is_stmt 0 discriminator 1
 1152 069a C9 F0 03 FF             		movw	r8, #-253
 1153 069e AD F0                   		movw	ax, r8
 1154 06a0 BD F2                   		movw	r10, ax
 1155 06a2 FA F2                   		movw	hl, r10
 1156 06a4 8B                      		mov	a, [hl]
 1157 06a5 31 69                   		shl	a, 6
 1158 06a7 31 7A                   		shr	a, 7 ;extzvmisalignqi a,[hl],#1,#1
 1159 06a9 9D F0                   		mov	r8, a
 1160 06ab D4 F0                   		cmp0	r8
 1161 06ad 61 F8                   		 sknz
 1162 06af EC 9A 06 00             		 br	!!.L61
 258:../src/OW.c   **** 		bitCount--;
 1163                             		.loc 1 258 0 is_stmt 1
 1164 06b3 88 04                   		mov	a, [sp+4]
 1165 06b5 9D F0                   		mov	r8, a
 1166 06b7 91                      		dec	a
 1167 06b8 98 04                   		mov	[sp+4], a
 1168                             	.L58:
 246:../src/OW.c   **** 
 1169                             		.loc 1 246 0
 1170 06ba 88 04                   		mov	a, [sp+4]
 1171 06bc D1                      		cmp0	a
 1172 06bd 61 E8                   		 skz
 1173 06bf EC 46 06 00             		 br	!!.L62
 259:../src/OW.c   **** 	}
 260:../src/OW.c   **** 	TAGI = 0;
 1174                             		.loc 1 260 0
 1175 06c3 C9 F0 05 FF             		movw	r8, #-251
 1176 06c7 AD F0                   		movw	ax, r8
 1177 06c9 BD F2                   		movw	r10, ax
 1178 06cb FA F2                   		movw	hl, r10
 1179 06cd 71 93                   		clr1	[hl].1 ;insvmisalignqi [hl],#1,#1,#0 {0}
 261:../src/OW.c   **** }
 1180                             		.loc 1 261 0
 1181 06cf 10 06                   		addw	sp, #6
 1182 06d1 D7                      		ret
 1183                             	.LFE16:
 1375                             	.Letext0:
 1376                             		.file 2 "../src/iodefine.h"
